"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdaVideoApi = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const errors_1 = require("./errors");
let doc;
let win;
if (typeof document === 'undefined') {
    const { DOMWindow, JSDOM } = require("jsdom");
    const dom = new JSDOM(`<!DOCTYPE html><html><head></head><body></body></html>`);
    doc = dom.window.document;
    win = dom.window;
}
else {
    doc = document;
    win = window;
}
axios_1.default.defaults.withCredentials = true;
class CdaVideoApi {
    constructor(id, playerData) {
        this.id = id;
        this.playerData = playerData;
    }
    static construct(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let vid = yield axios_1.default.get(encodeURI(`https://www.cda.pl/video/${id}`), { withCredentials: true });
            let $ = cheerio_1.default.load(vid.data);
            if (!$(`div#mediaplayer${id}`).prop("player_data"))
                throw new errors_1.InvalidIDError(id);
            return new CdaVideoApi(id, JSON.parse($(`div#mediaplayer${id}`).prop("player_data")));
        });
    }
    static fromID(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield CdaVideoApi.construct(id);
        });
    }
    static fromURL(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return CdaVideoApi.construct(this.URLtoID(url));
        });
    }
    /**
     * Gets video ID from URL
     * @param url URL of video
     * @returns ID of video
     */
    static URLtoID(url) {
        let surl = url.split("/").reverse();
        let id;
        if (surl[0] === "vfilm") {
            surl.reverse().pop();
            surl.reverse();
        }
        id = surl[0];
        return id;
    }
    /**
     *
     * @returns Qualities of video (value of map is needed to get video url)
     */
    getQualities() {
        let ret = new Map();
        Object.entries(this.playerData.video.qualities).forEach(([key, value]) => {
            ret.set(key, value);
        });
        return ret;
    }
    /**
     * Gets video ID
     * @returns Video ID
     */
    getVideoID() {
        return this.id;
    }
    /**
     * Gets direct video url
     * @param quality Quality of video (get from getQualities())
     * @returns Direct (downloadable) url of video
     */
    getDirectVideoLink(quality) {
        return __awaiter(this, void 0, void 0, function* () {
            let hash = this.playerData.video.hash2;
            let key = parseInt(this.playerData.api.ts.split("_")[0]);
            let pos = yield (0, axios_1.default)({
                method: "post",
                url: encodeURI(`https://www.cda.pl/video/${this.id}`),
                headers: {
                    "content-type": "application/json"
                },
                data: { "jsonrpc": "2.0", "method": "videoGetLink", "params": [this.id, quality, key, hash, {}], "id": 3 },
                withCredentials: true
            });
            return pos.data.result.resp;
        });
    }
    /**
     * ⚠⚠⚠ DOES NOT WORK! ⚠⚠⚠
     * you can use this as placeholder for now or contribute to fix it
     * @param comment Comment to be added
     */
    addComment(comment) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield axios_1.default.post("https://www.cda.pl/a/comment", JSON.stringify({
                t: comment
            }), { withCredentials: true });
            // const params = new URLSearchParams();
            // params.append("t", comment);
            // let res = await axios({
            //     method: "post",
            //     url: "https://www.cda.pl/a/comment",
            //     headers: {
            //         "content-type": "application/x-www-form-urlencoded"
            //     },
            //     data: params,
            //     withCredentials: true
            // })
        });
    }
    /**
     * Gets video data including comments
     * @param commentSorting Sorting of comments
     * @returns Video Data
     */
    getVideoData(commentSorting = "popular") {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let comsort = commentSorting === "popular" ? "najpopularniejsze" : "najnowsze";
            let $ = cheerio_1.default.load((yield axios_1.default.get(encodeURI(`https://www.cda.pl/video/${this.id}`))).data);
            let duration = $("span.pb-max-time").text();
            let title = $("span.title-name").children("h1").text();
            let description = (_a = $('span[itemprop="description"]').html()) === null || _a === void 0 ? void 0 : _a.replace(/<br>/g, "\n");
            let rating = parseInt($('span.rateMedVal').prop("style").width.replace("px", "")) / 32;
            let author = $("span.color-link-primary").text();
            let tags = $("a.tag-element").map((i, el) => $(el).text()).get();
            let comres = (yield axios_1.default.post(encodeURI(`https://www.cda.pl/video/${this.id}`), { "jsonrpc": "2.0", "method": "changeSortComment", "params": [this.id.substring(0, this.id.length - 2), "video", comsort, {}], "id": 6 }, { withCredentials: true }));
            let com = cheerio_1.default.load(comres.data.result);
            console.log(this.id.substring(0, this.id.length - 2));
            let commshtml = com("div[class*=kom_id_]").get().map(el => { let ele = doc.createElement("div"); ele.innerHTML = $.html(el); return ele; });
            let comments = [];
            commshtml.forEach(ele => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
                const el = ele.children[0];
                let isAnonymous = !(!el.querySelector("span.anonim"));
                let sendFromMobile = el.querySelector('span.anonim[style*="float:left;margin-left:10px"]') != null;
                let content = (_b = (_a = el.querySelector("div.tresc")) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.replace(/\n.*\n.*\n.*Odpowiedz.*\n.*\n/g, "").substring(2).trim();
                let ip = undefined;
                let likes = parseInt((_d = (_c = el.querySelector("span.commentRate")) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.replace("+", ""));
                let datesArr = (_f = (_e = el.querySelector("span.commentDate1")) === null || _e === void 0 ? void 0 : _e.textContent) === null || _f === void 0 ? void 0 : _f.replace(" ", "-").replace(":", "-").split("-").map(el => parseInt(el));
                let avatarURL = "";
                let username = "";
                if (isAnonymous) {
                    ip = (_h = (_g = el.querySelector('span[style*="float:left;margin-left:10px"]')) === null || _g === void 0 ? void 0 : _g.textContent) === null || _h === void 0 ? void 0 : _h.replace("(", "").replace(")", "").trim();
                    avatarURL = "https:" + ((_j = el.querySelector('img')) === null || _j === void 0 ? void 0 : _j.src);
                    username = (_l = (_k = el.querySelector(".anonim")) === null || _k === void 0 ? void 0 : _k.textContent) === null || _l === void 0 ? void 0 : _l.trim();
                }
                else {
                    avatarURL = "https:" + ((_m = el.querySelector('img')) === null || _m === void 0 ? void 0 : _m.src);
                    username = (_p = (_o = el.querySelector("a.autor1")) === null || _o === void 0 ? void 0 : _o.textContent) === null || _p === void 0 ? void 0 : _p.replace("\n", "").trim();
                }
                let comment = {
                    content,
                    avatarURL,
                    username,
                    ip,
                    likes,
                    sendFromMobile,
                    date: {
                        day: datesArr[2],
                        month: datesArr[1],
                        year: datesArr[0],
                        hour: datesArr[3],
                        minute: datesArr[4],
                        second: datesArr[5]
                    },
                    isAnonymous,
                };
                comments.push(comment);
            });
            return {
                title,
                description,
                rating,
                author,
                tags,
                duration,
                comments
            };
        });
    }
}
exports.CdaVideoApi = CdaVideoApi;
